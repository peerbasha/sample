// Config Document Model
package com.config.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import java.time.Instant;
import java.util.List;

@Document(collection = "configurations")
public class ConfigDocument {
    @Id
    private String id;
    private String key;
    private Object value;
    private String environment;
    private Long version;
    private Instant lastUpdated;
    private String description;
    private List<String> tags;

    // Getters and Setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public String getKey() { return key; }
    public void setKey(String key) { this.key = key; }
    public Object getValue() { return value; }
    public void setValue(Object value) { this.value = value; }
    public String getEnvironment() { return environment; }
    public void setEnvironment(String environment) { this.environment = environment; }
    public Long getVersion() { return version; }
    public void setVersion(Long version) { this.version = version; }
    public Instant getLastUpdated() { return lastUpdated; }
    public void setLastUpdated(Instant lastUpdated) { this.lastUpdated = lastUpdated; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    public List<String> getTags() { return tags; }
    public void setTags(List<String> tags) { this.tags = tags; }
}

// Configuration Manager
package com.config.manager;

import com.config.model.ConfigDocument;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.function.Consumer;
import java.util.ArrayList;
import java.util.List;

@Component
public class ConfigurationManager {
    private static final Logger logger = LoggerFactory.getLogger(ConfigurationManager.class);
    
    private final ConcurrentHashMap<String, Object> configCache = new ConcurrentHashMap<>();
    private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
    private final Map<String, List<Consumer<Object>>> listeners = new ConcurrentHashMap<>();

    public void updateConfig(ConfigDocument config) {
        lock.writeLock().lock();
        try {
            Object oldValue = configCache.get(config.getKey());
            configCache.put(config.getKey(), config.getValue());
            notifyListeners(config.getKey(), config.getValue(), oldValue);
            logger.info("Configuration updated: {}", config.getKey());
        } catch (Exception e) {
            logger.error("Error updating configuration: {}", config.getKey(), e);
        } finally {
            lock.writeLock().unlock();
        }
    }

    public <T> T getConfig(String key, Class<T> type) {
        lock.readLock().lock();
        try {
            Object value = configCache.get(key);
            if (value == null) {
                return null;
            }
            return type.cast(value);
        } catch (ClassCastException e) {
            logger.error("Error casting configuration value for key: {}", key, e);
            return null;
        } finally {
            lock.readLock().unlock();
        }
    }

    public void addListener(String key, Consumer<Object> listener) {
        listeners.computeIfAbsent(key, k -> new ArrayList<>()).add(listener);
    }

    private void notifyListeners(String key, Object newValue, Object oldValue) {
        List<Consumer<Object>> keyListeners = listeners.get(key);
        if (keyListeners != null) {
            keyListeners.forEach(listener -> {
                try {
                    listener.accept(newValue);
                } catch (Exception e) {
                    logger.error("Error notifying listener for key: {}", key, e);
                }
            });
        }
    }
}

// Configuration Poller
package com.config.poller;

import com.config.manager.ConfigurationManager;
import com.config.model.ConfigDocument;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import java.time.Instant;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;

@Component
public class ConfigurationPoller {
    private static final Logger logger = LoggerFactory.getLogger(ConfigurationPoller.class);
    
    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
    private final MongoTemplate mongoTemplate;
    private final ConfigurationManager configManager;
    private final AtomicReference<Instant> lastPollTime = new AtomicReference<>(Instant.now());
    private final long pollIntervalSeconds;

    public ConfigurationPoller(MongoTemplate mongoTemplate, 
                             ConfigurationManager configManager,
                             @Value("${config.poll.interval:30}") long pollIntervalSeconds) {
        this.mongoTemplate = mongoTemplate;
        this.configManager = configManager;
        this.pollIntervalSeconds = pollIntervalSeconds;
    }

    @PostConstruct
    public void startPolling() {
        scheduler.scheduleAtFixedRate(this::pollConfiguration, 
            0, pollIntervalSeconds, TimeUnit.SECONDS);
        logger.info("Configuration polling started with interval: {} seconds", pollIntervalSeconds);
    }

    @PreDestroy
    public void stopPolling() {
        scheduler.shutdown();
        try {
            if (!scheduler.awaitTermination(60, TimeUnit.SECONDS)) {
                scheduler.shutdownNow();
            }
        } catch (InterruptedException e) {
            scheduler.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }

    private void pollConfiguration() {
        try {
            Query query = Query.query(
                Criteria.where("lastUpdated").gt(lastPollTime.get())
            );
            List<ConfigDocument> updates = mongoTemplate.find(query, ConfigDocument.class);
            
            if (!updates.isEmpty()) {
                updates.forEach(configManager::updateConfig);
                lastPollTime.set(Instant.now());
                logger.info("Found {} configuration updates", updates.size());
            }
        } catch (Exception e) {
            logger.error("Configuration polling failed", e);
        }
    }
}

// Change Stream Listener
package com.config.stream;

import com.config.manager.ConfigurationManager;
import com.config.model.ConfigDocument;
import com.mongodb.client.MongoClient;
import com.mongodb.client.model.changestream.ChangeStreamDocument;
import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;

@Component
public class ConfigurationChangeListener {
    private static final Logger logger = LoggerFactory.getLogger(ConfigurationChangeListener.class);
    
    private final MongoClient mongoClient;
    private final ConfigurationManager configManager;
    private final ExecutorService executor = Executors.newSingleThreadExecutor();
    private final AtomicBoolean running = new AtomicBoolean(true);

    public ConfigurationChangeListener(MongoClient mongoClient, ConfigurationManager configManager) {
        this.mongoClient = mongoClient;
        this.configManager = configManager;
    }

    @PostConstruct
    public void startListening() {
        executor.submit(this::listenToChanges);
        logger.info("Configuration change stream listener started");
    }

    @PreDestroy
    public void stopListening() {
        running.set(false);
        executor.shutdown();
    }

    private void listenToChanges() {
        while (running.get()) {
            try {
                mongoClient.getDatabase("config")
                    .getCollection("configurations")
                    .watch()
                    .forEach(event -> {
                        if (!running.get()) return;
                        
                        try {
                            Document doc = event.getFullDocument();
                            if (doc != null) {
                                ConfigDocument config = mapToConfig(doc);
                                configManager.updateConfig(config);
                                logger.info("Configuration updated via change stream: {}", config.getKey());
                            }
                        } catch (Exception e) {
                            logger.error("Error processing change stream event", e);
                        }
                    });
            } catch (Exception e) {
                logger.error("Change stream error, attempting to reconnect", e);
                sleep(5000); // Wait before reconnecting
            }
        }
    }

    private ConfigDocument mapToConfig(Document doc) {
        ConfigDocument config = new ConfigDocument();
        config.setId(doc.getObjectId("_id").toString());
        config.setKey(doc.getString("key"));
        config.setValue(doc.get("value"));
        config.setEnvironment(doc.getString("environment"));
        config.setVersion(doc.getLong("version"));
        config.setLastUpdated(doc.getDate("lastUpdated").toInstant());
        config.setDescription(doc.getString("description"));
        config.setTags(doc.getList("tags", String.class));
        return config;
    }

    private void sleep(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}

// Spring Configuration
package com.config.config;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.core.MongoTemplate;

@Configuration
public class MongoConfig {
    
    @Value("${spring.data.mongodb.uri}")
    private String mongoUri;

    @Bean
    public MongoClient mongoClient() {
        return MongoClients.create(mongoUri);
    }

    @Bean
    public MongoTemplate mongoTemplate(MongoClient mongoClient) {
        return new MongoTemplate(mongoClient, "config");
    }
}

// Example Usage
package com.config.example;

import com.config.manager.ConfigurationManager;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/config")
public class ConfigurationController {
    
    private final ConfigurationManager configManager;

    public ConfigurationController(ConfigurationManager configManager) {
        this.configManager = configManager;
    }

    @GetMapping("/{key}")
    public Object getConfig(@PathVariable String key) {
        return configManager.getConfig(key, Object.class);
    }

    // Example of using configuration in application code
    @GetMapping("/feature/{featureKey}")
    public boolean isFeatureEnabled(@PathVariable String featureKey) {
        Boolean enabled = configManager.getConfig("feature." + featureKey, Boolean.class);
        return Boolean.TRUE.equals(enabled);
    }
}
